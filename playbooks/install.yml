---
- name: Manage Crowdstrike Falcon agents
  hosts: crowdstrike
  gather_facts: false
  tasks:
    - name: End play for absent hosts
      ansible.builtin.meta: end_play
      when: falcon_host_state == 'absent'

    - name: Gather host facts
      ansible.builtin.setup:

    - name: Gather service facts
      ansible.builtin.service_facts:

    - name: Install gpg package
      ansible.builtin.package:
        name: gpg
        state: present
      become: true

    - name: Deploy Crowdstrike agent
      ansible.builtin.include_role:
        name: crowdstrike.falcon.falcon_install
      when: services['falcon-sensor'] is not defined

    - name: Configure Crowdstrike agent
      ansible.builtin.include_role:
        name: crowdstrike.falcon.falcon_configure

    - name: Query agent id
      crowdstrike.falcon.falconctl_info:
        name:
          - "aid"
      register: agent_info_query
      become: true

    - name: Set agent id facts
      ansible.builtin.set_fact:
        agent_id: "{{ agent_info_query.falconctl_info.aid }}"

    - name: Debug agent id
      ansible.builtin.debug:
        var: agent_id

    - name: Register agents to group
      when: inventory_hostname == ansible_play_hosts[0]
      block:
        - name: Get Crowdstrike Authentication Token
          ansible.builtin.uri:
            url: "{{ falcon_api_base }}/oauth2/token"
            follow_redirects: "{{ falcon_api_redirect }}"
            method: POST
            body_format: form-urlencoded
            body:
              client_id: "{{ falcon_client_id }}"
              client_secret: "{{ falcon_client_secret }}"
            status_code: 201
          register: auth_response

        - name: Set auth facts
          ansible.builtin.set_fact:
            api_token: "{{ auth_response.json.access_token }}"
          no_log: true

        - name: Set global auth facts
          ansible.builtin.set_fact:
            api_token: "{{ auth_response.json.access_token }}"
          delegate_to: localhost
          delegate_facts: true
          no_log: true

        - name: Query registered groups
          ansible.builtin.uri:
            url: "{{ falcon_api_base }}/devices/combined/host-groups/v1?filter={{ _filter }}"
            follow_redirects: "{{ falcon_api_redirect }}"
            method: GET
            headers:
              Authorization: "Bearer {{ api_token }}"
            body_format: form-urlencoded
          vars:
            _filter: "name:'{{ falcon_group }}'"
          register: group_query

        - name: Set group facts
          ansible.builtin.set_fact:
            falcon_group_data: "{{ group_query.json.resources | default([]) }}"

        - name: Check group query
          ansible.builtin.assert:
            that: falcon_group_data | length == 1
            fail_msg: "Group query returned unexpected results: {{ falcon_group_data }}"

        - name: Set group facts
          ansible.builtin.set_fact:
            group_id: "{{ _group.id }}"
          vars:
            _group: "{{ falcon_group_data | first }}"

        - name: Set global group facts
          ansible.builtin.set_fact:
            group_id: "{{ group_id }}"
          delegate_to: localhost
          delegate_facts: true

        - name: Aggregate agent ids
          ansible.builtin.set_fact:
            agent_ids: "{{ ansible_play_hosts | map('extract', hostvars, 'agent_id') | list }}"

        - name: Set global agend ids
          ansible.builtin.set_fact:
            agent_ids: "{{ agent_ids }}"
          delegate_to: localhost
          delegate_facts: true

        - name: Register agents to group - attempt 1
          block:
            - name: Register agents to group
              ansible.builtin.uri:
                url: "{{ falcon_api_base }}/devices/entities/host-group-actions/v1?action_name=add-hosts"
                follow_redirects: "{{ falcon_api_redirect }}"
                method: POST
                headers:
                  Authorization: "Bearer {{ api_token }}"
                body_format: json
                body:
                  action_parameters:
                    - name: filter
                      value: "(device_id:{{ agent_ids | to_json }})"
                  ids:
                    - "{{ group_id }}"

            - name: Query group members
              ansible.builtin.uri:
                url: "{{ falcon_api_base }}/devices/queries/host-group-members/v1?id={{ group_id }}&filter={{ _filter }}&limit={{ _limit }}"
                follow_redirects: "{{ falcon_api_redirect }}"
                method: GET
                headers:
                  Authorization: "Bearer {{ api_token }}"
              vars:
                _limit: "{{ falcon_api_page_size }}"
                _format: "'%s'"
                _agent_ids: "{{ agent_ids | map('nephelaiio.plugins.map_format', _format) }}"
                _filter: "device_id:[{{ _agent_ids | join(',') }}]"
              register: group_members_query

            - name: Verify agent group registrations
              ansible.builtin.fail:
                msg: "Agent registration failed, expected {{ agent_ids }}, got {{ _registrations }}"
              vars:
                _registrations: "{{ group_members_query.json.resources }}"
              when: agent_ids | difference(_registrations) | length > 0

          rescue:
            - name: Wait for agent registration - attempt 2
              ansible.builtin.pause:
                seconds: 30

            - name: Register agents to group - attempt 2
              block:
                - name: Register agents to group
                  ansible.builtin.uri:
                    url: "{{ falcon_api_base }}/devices/entities/host-group-actions/v1?action_name=add-hosts"
                    follow_redirects: "{{ falcon_api_redirect }}"
                    method: POST
                    headers:
                      Authorization: "Bearer {{ api_token }}"
                    body_format: json
                    body:
                      action_parameters:
                        - name: filter
                          value: "(device_id:{{ agent_ids | to_json }})"
                      ids:
                        - "{{ group_id }}"

                - name: Query group members
                  ansible.builtin.uri:
                    url: "{{ falcon_api_base }}/devices/queries/host-group-members/v1?id={{ group_id }}&filter={{ _filter }}&limit={{ _limit }}"
                    follow_redirects: "{{ falcon_api_redirect }}"
                    method: GET
                    headers:
                      Authorization: "Bearer {{ api_token }}"
                  vars:
                    _limit: "{{ falcon_api_page_size }}"
                    _format: "'%s'"
                    _agent_ids: "{{ agent_ids | map('nephelaiio.plugins.map_format', _format) }}"
                    _filter: "device_id:[{{ _agent_ids | join(',') }}]"
                  register: group_members_query

                - name: Verify agent group registrations
                  ansible.builtin.fail:
                    msg: "Agent registration failed, expected {{ agent_ids }}, got {{ _registrations }}"
                  vars:
                    _registrations: "{{ group_members_query.json.resources }}"
                  when: agent_ids | difference(_registrations) | length > 0

              rescue:
                - name: Wait for agent registration - attempt 3
                  ansible.builtin.pause:
                    seconds: 30

                - name: Register agents to group - attempt 3
                  block:
                    - name: Register agents to group
                      ansible.builtin.uri:
                        url: "{{ falcon_api_base }}/devices/entities/host-group-actions/v1?action_name=add-hosts"
                        follow_redirects: "{{ falcon_api_redirect }}"
                        method: POST
                        headers:
                          Authorization: "Bearer {{ api_token }}"
                        body_format: json
                        body:
                          action_parameters:
                            - name: filter
                              value: "(device_id:{{ agent_ids | to_json }})"
                          ids:
                            - "{{ group_id }}"

                    - name: Query group members
                      ansible.builtin.uri:
                        url: "{{ falcon_api_base }}/devices/queries/host-group-members/v1?id={{ group_id }}&filter={{ _filter }}&limit={{ _limit }}"
                        follow_redirects: "{{ falcon_api_redirect }}"
                        method: GET
                        headers:
                          Authorization: "Bearer {{ api_token }}"
                      vars:
                        _limit: "{{ falcon_api_page_size }}"
                        _format: "'%s'"
                        _agent_ids: "{{ agent_ids | map('nephelaiio.plugins.map_format', _format) }}"
                        _filter: "device_id:[{{ _agent_ids | join(',') }}]"
                      register: group_members_query

                    - name: Verify agent group registrations
                      ansible.builtin.assert:
                        that: agent_ids | difference(_registrations) | length == 0
                        fail_msg: "Agent registration failed, expected {{ agent_ids }}, got {{ _registrations }}"
                      vars:
                        _registrations: "{{ group_members_query.json.resources }}"

    - name: Manage stale agent registrations
      when: ansible_play_hosts == groups['crowdstrike']
      block:
        - name: Set auth facts
          ansible.builtin.set_fact:
            api_token: "{{ hostvars['localhost']['api_token'] }}"

        - name: Set group id facts
          ansible.builtin.set_fact:
            group_id: "{{ hostvars['localhost']['group_id'] }}"

        - name: Set agent id facts
          ansible.builtin.set_fact:
            agent_ids: "{{ hostvars['localhost']['agent_ids'] }}"

        - name: Query group members
          ansible.builtin.uri:
            url: "{{ falcon_api_base }}/devices/queries/host-group-members/v1?id={{ group_id }}&limit={{ falcon_api_page_size }}"
            follow_redirects: "{{ falcon_api_redirect }}"
            method: GET
            headers:
              Authorization: "Bearer {{ api_token }}"
          register: group_members_query_head

        - name: Set group member pagination facts
          ansible.builtin.set_fact:
            group_members_pages: "{{ range(_pagination.offset, _pagination.total, _pagination.limit) }}"
            group_members_limit: "{{ _pagination.limit }}"
          vars:
            _pagination: "{{ group_members_query_head.json.meta.pagination }}"

        - name: Paginate group member query
          ansible.builtin.uri:
            url: "{{ falcon_api_base }}/devices/queries/host-group-members/v1?id={{ group_id }}&limit={{ group_members_limit }}&offset={{ item }}"
            follow_redirects: "{{ falcon_api_redirect }}"
            method: GET
            headers:
              Authorization: "Bearer {{ api_token }}"
          register: group_members_query_pages
          loop: "{{ group_members_pages }}"

        - name: Set group members facts
          ansible.builtin.set_fact:
            group_members: "{{ _head + _tail }}"
          vars:
            _head: "{{ group_members_query_head.json.resources }}"
            _tail: "{{ _pages | map(attribute='json') | map(attribute='resources') | list | flatten }}"
            _pages: "{{ group_members_query_pages.results | default([]) }}"

        - name: Set group member facts
          ansible.builtin.set_fact:
            group_members_stale: "{{ group_members | difference(agent_ids) }}"

        - name: Drop stale members from group
          ansible.builtin.uri:
            url: "{{ falcon_api_base }}/devices/entities/host-group-actions/v1?action_name=remove-hosts"
            follow_redirects: "{{ falcon_api_redirect }}"
            status_code: [200, 404]
            method: POST
            headers:
              Authorization: "Bearer {{ api_token }}"
            body_format: json
            body:
              action_parameters:
                - name: filter
                  value: "(device_id:{{ group_members_stale | to_json }})"
              ids:
                - "{{ group_id }}"
          when:
            - group_members_stale | length > 0
            - inventory_hostname == ansible_play_hosts[0]
