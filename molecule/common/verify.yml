---
- name: Set Falcon defaults
  ansible.builtin.import_playbook: pokerops.crowdstrike.defaults

- name: Verify groups and hosts
  hosts: crowdstrike
  any_errors_fatal: true
  tasks:
    - name: Verify group
      when:
        - falcon_group_verify | default(True) | bool
        - inventory_hostname == ansible_play_hosts[0]
      delegate_to: localhost
      block:
        - name: Get Crowdstrike Authentication Token
          ansible.builtin.uri:
            url: "{{ falcon_api_base }}/oauth2/token"
            follow_redirects: "{{ falcon_api_redirect }}"
            method: POST
            body_format: form-urlencoded
            body:
              client_id: "{{ falcon_client_id }}"
              client_secret: "{{ falcon_client_secret }}"
            status_code: 201
          register: auth_response

        - name: Set auth facts
          set_fact:
            api_token: "{{ auth_response.json.access_token }}"
          no_log: "{{ falcon_api_enable_no_log }}"

        - name: Query registered groups
          ansible.builtin.uri:
            url: "{{ falcon_api_base }}/devices/combined/host-groups/v1?filter={{ _filter }}"
            follow_redirects: "{{ falcon_api_redirect }}"
            method: GET
            headers:
              Authorization: "Bearer {{ api_token }}"
            body_format: form-urlencoded
          vars:
            _filter: "name:'{{ falcon_group }}'"
          register: group_query

        - name: Set group facts
          ansible.builtin.set_fact:
            group_data: "{{ group_query.json.resources }}"

        - name: Verify group facts
          ansible.builtin.assert:
            that:
              - group_data is not none
              - group_data | length == 1
            fail_msg: "Group query returned unexpected results: {{ group_data }}"

        - name: Debug group facts
          ansible.builtin.debug:
            var: group_data

    - name: Query agent id
      crowdstrike.falcon.falconctl_info:
        name:
          - "aid"
      register: agent_info_query
      become: true

    - name: Set agent id facts
      ansible.builtin.set_fact:
        agent_id: "{{ agent_info_query.falconctl_info.aid }}"

    - name: Debug agent id
      ansible.builtin.debug:
        var: agent_id

    - name: Verify Falcon agents
      delegate_to: localhost
      when:
        - falcon_agent_verify | default(True) | bool
        - inventory_hostname == ansible_play_hosts[0]
      block:
        - name: Query registered devices
          ansible.builtin.uri:
            url: "{{ falcon_api_base }}/devices/queries/devices/v1?&limit={{ falcon_api_page_size }}"
            follow_redirects: "{{ falcon_api_redirect }}"
            method: GET
            headers:
              Authorization: "Bearer {{ api_token }}"
          register: device_query_head

        - name: Set pagination facts
          ansible.builtin.set_fact:
            device_pages: "{{ range(_pagination.offset, _pagination.total + 1, _pagination.limit) }}"
            device_limit: "{{ _pagination.limit }}"
          vars:
            _pagination: "{{ device_query_head.json.meta.pagination }}"

        - name: Paginate agent query
          ansible.builtin.uri:
            url: "{{ falcon_api_base }}/devices/queries/devices/v1?filter={{ _filter }}&limit={{ falcon_api_page_size }}&offset={{ item }}"
            follow_redirects: "{{ falcon_api_redirect }}"
            method: GET
            headers:
              Authorization: "Bearer {{ api_token }}"
          vars:
            _filter: "hostname:['{{ inventory_hostname }}']"
          register: device_query_pages
          loop: "{{ device_pages }}"

        - name: Set agent facts
          ansible.builtin.set_fact:
            falcon_host_data: "{{ _head + _tail }}"
          vars:
            _head: "{{ device_query_head.json.resources }}"
            _pages: "{{ device_query_pages.results | default([]) }}"
            _tail: "{{ _pages | map(attribute='json') | map(attribute='resources') | list | flatten }}"

        - name: Debug registered agents
          ansible.builtin.debug:
            var: falcon_host_data

        - name: Set agent id facts
          ansible.builtin.set_fact:
            agent_ids: "{{ ansible_play_hosts | map('extract', hostvars, 'agent_id') | list }}"

        - name: Debug playbook agents
          ansible.builtin.debug:
            var: agent_ids

        - name: Verify agent facts
          ansible.builtin.assert:
            that: agent_id in falcon_host_data
            fail_msg: "Host query returned unexpected results: {{ falcon_host_data }}"

        - name: Query group registrations
          ansible.builtin.uri:
            url: "{{ falcon_api_base }}/devices/queries/host-group-members/v1?id={{ _group_id }}"
            follow_redirects: "{{ falcon_api_redirect }}"
            method: GET
            headers:
              Authorization: "Bearer {{ api_token }}"
          vars:
            _format: "'%s'"
            _group: "{{ group_data | first }}"
            _group_id: "{{ _group.id }}"
          register: group_members_query

        - name: Set group registration facts
          ansible.builtin.set_fact:
            group_members: "{{ group_members_query.json.resources | intersect(_agent_ids) }}"
          vars:
            _agent_ids: "{{ agent_ids | map('nephelaiio.plugins.map_format', _format) }}"

        - name: Debug group registrations
          ansible.builtin.debug:
            var: group_members

        - name: Verify group registrations
          ansible.builtin.assert:
            that: agent_ids | ansible.builtin.symmetric_difference(group_members) | length == 0
            fail_msg: "Group membership verification failed, expected: {{ agent_ids }}, got: {{ group_members }}"
